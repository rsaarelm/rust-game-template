Misc notes about non-obvious bits
Should eventually be sorted into a more coherent document
For now I'm just writing these down as I run into them

Semantic commit tags
	After https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716
	Roughly in order of importance, pick the highest one if multiple categories apply
	feat
		New feature for the user, not a new feature for build script
	ui
		UI niceties that don't reflect new game functionality
	lib
		New library machinery used by features
	fix
		Bug fix for the user, not a fix to a build script
	content
		Editing application content data, user-visible behavior change
	docs
		Changes to the documentation
	test
		Adding missing tests, refactoring tests; no production code change
	refactor
		Refactoring production code, eg. renaming a variable
	style
		Formatting, missing semicolons, etc; no production code change
	chore
		Updating grunt tasks etc; no production code change

Releases
	Begin the message of a release commit with "Release "
	Do not use this prefix on any other git commit message
	A release commit must increment the release string in Cargo.toml
	The game built from the release commit will report it's release string without an appended git hash

Developing games on top of the template project
	The template isn't really an engine
	Instead of the game having a dependency to the separate engine library, game projects are forked off the engine base
	You can keep pushing generic changes to the template and keep the game-specific stuff in a separate branch
	(This setup is untested as of 2024-03 and might turn out to be too annoying in practice)
	Setup for game project
	Set gametemplate as a secondary remote
		git remote add template https://github.com/rsaarelm/gametemplate  # Wherever you have it hosted
		git fetch
	Check out template's master branch as the local template branch
		git checkout -b template --track template/master
	Git doesn't like to push to a differently-named remote branch by default, so you need to do
		git config --local push.default upstream
	You can now work on the shared machinery in `template` branch and work on the game-specific stuff in `master`
	You probably don't want to keep rebasing game `master` branch on `template`, so bring it up to speed with merge commits to `master` instead
		git checkout master
		git merge template

Async runner functions and display frames
	Runner functions like run::explore, run::aim should do a draw().await early on to start a new frame
	If they are triggered by an earlier runner and don't switch frame, they will be seeing the same keypress the previous frame saw
	This causes the keypress to be used for two different actions

Upstairs go north, downstairs go south on maps
	Because north = up, south = down, visually

The widget idiom
	Widgets are basically fancier IMGUI buttons, up to full game map view
	The idea is to have complex UI logic inside them, but never do mutable actions directly when the widget is being rendered
	Instead, the widget will return a typed value describing actions
		This can be an enum sum of multiple different actions, in case of things like map view
	The caller can then choose to perform the changes indicated by the return value or ignore it
	This lets us have an active or an inactive map widget on screen, depending on what is done with the return value
	Most of the complexity involved with the widget display is capsulated inside the draw command

Gamestate reproducibility
	The game must end up in the exact same state in every run on every platform given the same initial RNG seed and sequence of player inputs
	Ways to break state reproducibility
		Rely on the iteration order of a Hash based container at any point
			Avoid HashMap and HashSet in map generation or determinining the order of acting entities
			Use BTreeMap/Set or IndexMap/Set instead
		Mixing user interface actions or wall clock time with game mechanics
			Have the runtime use its own RNG and don't have UI affect it by any other means than pushing command inputs to runtime
		Different behavior on different platforms
			Is the RNG same on 32-bit and 64-bit platforms?
			Is the RNG same on big-endian and little-endian platforms?
		Rely on a hash function that's not stable over platforms
			FxHash hashing seems to vary between 32 and 64 bits
			Use a specific named hash implementation like twox_hash
	The util crate should provide a RNG that works the same on all platforms
		The RNG algorithm needs to be known
		Just going with "whatever the standard library provides" will break reproducibility if the standard library changes their algorithm

Game loop order issues
	Call screen render async function early in UI mode functions
	This will refresh navni's currently cached keypress
	You do not want to accidentally reuse the keypress value from the previous state function that sent you to this one by staying on the same frame for two separate logic blocks

IDM things
	String blocks sometimes use NBSP as left padding for things saved in IDM files, since IDM does not consider NBSP as indentation
	When writing code that generates this, always escape NBSP chars as \u{00a0} instead of emitting a literal NBSP character in the code
	People reading the code can't tell the difference between a literal NBSP and ASCII space on sight, so the code can be very confusing if they don't know about the NBSP trick
	IDM style is to use kebab-case with field naming, use `#[serde(rename_all = "kebab-case")]` on struct and enum declarations
	Serialized structs are expected to omit fields that have a default value, use `#[serde(default)]` on struct declarations

Interned string
	Interned strings (util::InString) are reduced to machine word sized values and have their text stored in an internal cache
	They implement copy and are very fast to compare for equality or hash
	Fetching the actual contents of the string requires accessing the internal cache and is slower than that of a regular `String`
		Because of this interned strings are *not* fast to sort in lexical order and are not a good fit for Ord based containers
	Consider using interned strings for internal identifier values that are copied in many places and compared for equality more often than they are examined for their actual string contents

Gamedata notes
	Gamedata contents are files under data/ directory
	The corresponding data structure is content::Data
	Gamedata contains human-authored structured data describing static aspects of the game
	Such as item and creature specifications and the terrain of fixed maps
	The rest of the code assumes that the gamedata value is available for it as a static reference
		This introduces a potential deadlock, as gamedata itself cannot involve types which require gamedata to be available when they're deserialized
		An example of a type you can't directly have in gamedata is `Spawn` which relies on gamedata existing to validate itself
		Use util::LazyRes type to break this deadlock
		LazyRes allows serializing data as (usually) string, and will fetch the actual data the first time the value is accessed

	ECS components for entities should have default values that make sense for "not defined for this entity"
		Eg. if it's just a number, zero should be same as "not defined"
		Wrap the type in Option if a missing value isn't clearly expressed otherwise
		Enum-type components have a `None` value in the main enum just to avoid the extra layering of an Option around it
			This might be bad design and need to be changed

	Prefer signed integer types for components
		There isn't good reason to use unsigned and it opens you up to bugs if you ever subtract below 0 for any reason
		Also avoid float types, a fixed-point integer should work for most cases
			One exception are games that have continuous-space physics, float vectors are probably okay there
			Turn-based games usually have a discrete space though

Optimistic Search Assumption
	Pathfinding assumes that all unexplored terrain is perfectly traversable open ground
	It adjusts as terrain gets revealed and shown to be blocked
	This creates consistent logic for pathing into unexplored areas where units start with a naive path and readjust as they explore more during the path
	A somewhat similar assumption is used when drawing walls, rendered wall tiles do not glom to adjacent walls if the adjacent walls are on unexplored tiles

Voxel space guidelines
	Simplest possible space
		No flat floor tiles, full voxel cube is needed for floor
		Single cell is enough vertical space for human-sized rooms
	You can walk a single voxel's height up or down in a regular movement step
	The clever idea: The map shows no change if there's a single step up or down
		The start of a walkable slope just looks like regular floor
		Show an arrow glyph if the slope continues further out from +/-1z
		Only draw floors at -1, 0 and 1 z
	A voxel world should look and play like a traditional roguelike space with the correct architecture
	Doors are weird
		There isn't really a sensible story for how a door should work from above
		Or how multiple doors stacked right on top of each other should work
		So door voxels should always have a wall voxel above (lintel) and below (threshold) them
			If either the lintel or the threshold is removed by dynamic terrain change, the door should be removed as well

Snappy compression
	Save file data is very low entropy as of 2024-02 so it pays to use lossless compression
	View compressed saves with `snunzip -ct raw saved.idm.sz`

Sources for the JS shim files
	(as of 2024-03)
	audio.js         https://raw.githubusercontent.com/not-fl3/quad-snd/master/js/audio.js
	gl.js            https://raw.githubusercontent.com/not-fl3/miniquad/master/js/gl.js
	quad-storage.js  https://raw.githubusercontent.com/optozorax/quad-storage/master/js/quad-storage.js
	sapp_jsutils.js  https://raw.githubusercontent.com/not-fl3/sapp-jsutils/master/js/sapp_jsutils.js

The modal monster is a pig, express intrinsic flags as "how it differs from a pig"
	A monster with zero defined features is more or less equivalent to an average pig
	Motivation, same size and rough biology as a human, but minus intelligence and hands which are unusual
	Eg. a pig is
		alive
		needs to breathe
		has a skeleton made of bone
		bleeds red blood
		is warm-blooded
		is an omnivore that's not particularly predatory
		weights around 100 kg
	So you'd have specifically defined properties like
		is undead
		does not breathe
		is invertebrate
		has a stone skeleton
		is cold-blooded
		is a predator
		weights more than 500 kg
		is sapient
		has hands
		has no head
	A "generic creature spawn" could be a literal pig
